// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CoursePurchasePostgreSQL.Models;

public partial class CoursePurchaseContext : DbContext
{
    public CoursePurchaseContext()
    {
    }

    public CoursePurchaseContext(DbContextOptions<CoursePurchaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Batch> Batches { get; set; }

    public virtual DbSet<BatchDetail> BatchDetails { get; set; }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
<<<<<<< HEAD
        => optionsBuilder.UseNpgsql("Persist Security Info=True;Password=admin;Username=postgres;Database=CoursePurchase;Host=localhost");
=======
        => optionsBuilder.UseNpgsql("Password=admin@123;Username=postgres;Database=CoursePurchase;Host=localhost");
>>>>>>> 21e60ef8529287ed344cfe233eb65bf70cda841d

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Batch>(entity =>
        {
            entity.HasKey(e => e.BatchId).HasName("Batches_pkey");
        });

        modelBuilder.Entity<BatchDetail>(entity =>
        {
            entity.HasKey(e => e.BatchDetailId).HasName("BatchDetails_pkey");

            entity.HasOne(d => d.Batch).WithMany(p => p.BatchDetails).HasConstraintName("fk_batchdetails_batches");
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.CartId).HasName("Cart_pkey");

            entity.Property(e => e.Amount).HasDefaultValueSql("0");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.Quantity).HasDefaultValue(0);
            entity.Property(e => e.TotalPrice).HasDefaultValueSql("0");

            entity.HasOne(d => d.Batch).WithMany(p => p.Carts).HasConstraintName("fk_cart_batches");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("Order_pkey");

            entity.Property(e => e.Createddate).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}